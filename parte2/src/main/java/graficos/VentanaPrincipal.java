package graficos;

import javax.swing.JOptionPane;
import javax.swing.*;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.table.DefaultTableModel;
import java.util.concurrent.ExecutorService; // Opcional
import java.util.concurrent.Executors; // Opcional
import datos.*;
import operaciones.*;


public class VentanaPrincipal extends javax.swing.JFrame {
    
    private Inventario inventarioA;
    private Inventario inventarioB;
    private Inventario inventarioOrigen;
    private Inventario inventarioDestino;
    
    private HistorialOperaciones historialOperaciones;
    
    private DefaultTableModel modeloInventarioA;
    private DefaultTableModel modeloInventarioB;
    
    private ExecutorService executor; // Gestionara los hilos
    

    public VentanaPrincipal() {
        initComponents();
        
        inventarioA = new Inventario();
        inventarioB = new Inventario();
        historialOperaciones = new HistorialOperaciones(); 
        
        // Inicializamos los hilos
        executor = Executors.newFixedThreadPool(2); 
    
        // Inicializar las tablas
        modeloInventarioA = new DefaultTableModel(new Object[]{"Producto","Cantidad"},0);
        modeloInventarioB = new DefaultTableModel(new Object[]{"Producto","Cantidad"},0);
        
        // Configuracion las tablas
        tablaInventarioA.setModel(modeloInventarioA);
        tablaInventarioB.setModel(modeloInventarioB);
        
        // Actualizar tablas
        actualizarTablas();
        
    }
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtProducto = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtCantidad = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        cmbInventarioOrigen = new javax.swing.JComboBox<>();
        cmbInventarioDestino = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        btnTransferencia = new javax.swing.JButton();
        btnAjuste = new javax.swing.JButton();
        btnHistorial = new javax.swing.JButton();
        btnAgregar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaInventarioA = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaInventarioB = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        comboBoxInventario = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        jLabel1.setText("SISTEMA DE INVENTARIO");

        jLabel2.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel2.setText("PRODUCTO:");

        txtProducto.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txtProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtProductoActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel3.setText("CANTIDAD:");

        txtCantidad.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txtCantidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCantidadActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel4.setText("INVENTARIO ORIGEN: ");

        cmbInventarioOrigen.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        cmbInventarioOrigen.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Inventario A", "Inventario B" }));

        cmbInventarioDestino.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        cmbInventarioDestino.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Inventario B", "Inventario A" }));

        jLabel5.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel5.setText("INVENTARIO DESTINO: ");

        btnTransferencia.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnTransferencia.setText("Realizar Transferencia");
        btnTransferencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTransferenciaActionPerformed(evt);
            }
        });

        btnAjuste.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnAjuste.setText("Realizar Ajuste");
        btnAjuste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAjusteActionPerformed(evt);
            }
        });

        btnHistorial.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnHistorial.setText("Ver Historial");
        btnHistorial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHistorialActionPerformed(evt);
            }
        });

        btnAgregar.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnAgregar.setText("Agregar");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        tablaInventarioA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "PRODUCTO", "CANTIDAD"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablaInventarioA);

        jLabel6.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        jLabel6.setText("INVENTARIO A");

        tablaInventarioB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "PRODUCTO", "CANTIDAD"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tablaInventarioB);

        jLabel7.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        jLabel7.setText("INVENTARIO B");

        comboBoxInventario.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        comboBoxInventario.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Inventario A", "Inventario B" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(cmbInventarioDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cmbInventarioOrigen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnTransferencia, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(100, 100, 100))
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(117, 117, 117)
                        .addComponent(jLabel7)))
                .addGap(25, 25, 25))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator2)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(70, 70, 70)
                        .addComponent(comboBoxInventario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(113, 113, 113)
                        .addComponent(btnAgregar)
                        .addGap(18, 18, 18)
                        .addComponent(btnAjuste, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 763, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(244, 244, 244)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(132, 132, 132)
                        .addComponent(jLabel6))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(303, 303, 303)
                        .addComponent(btnHistorial, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(83, 83, 83)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel1)
                        .addGap(46, 46, 46)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAjuste, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboBoxInventario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(cmbInventarioOrigen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(cmbInventarioDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(btnTransferencia, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(27, 27, 27)
                .addComponent(btnHistorial, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtProductoActionPerformed

    }//GEN-LAST:event_txtProductoActionPerformed

    private void txtCantidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCantidadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCantidadActionPerformed

    private void btnTransferenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTransferenciaActionPerformed
        // Obtener datos del producto
        final Inventario inventarioOrigen;
        final Inventario inventarioDestino;
        
        String inventarioOrigenStr = (String) cmbInventarioOrigen.getSelectedItem();
        String inventarioDestinoStr = (String) cmbInventarioDestino.getSelectedItem();
        
        if (inventarioOrigenStr.equals(inventarioDestinoStr)){
            JOptionPane.showMessageDialog(this,"No se puede transferir de un inventario a si mismo.");
            return;            
        }
        
        // Seleccion de  Inventario Origen
        switch (inventarioOrigenStr){
            case "Inventario A":
                inventarioOrigen = inventarioA;
                break;
            case "Inventario B":
                inventarioOrigen = inventarioB;
                break;
            default:
                return;
        }
        
        // Seleccion de  Inventario Destino
        switch (inventarioDestinoStr){
            case "Inventario A":
                inventarioDestino = inventarioA;
                break;
            case "Inventario B":
                inventarioDestino = inventarioB;
                break;
            default:
                return;
        }

        String producto = txtProducto.getText();
        int cantidad;
        try{
            cantidad = Integer.parseInt(txtCantidad.getText());
        }catch (NumberFormatException e){
            JOptionPane.showMessageDialog(this, "Cantidad invalida. Por favor ingrese un número.");
            return;
        }
        
        OperacionInventario transferencia = FabricaOperaciones.crearOperacion("transferencia", producto, cantidad, inventarioDestino);
        
        executor.submit(()->{
            transferencia.ejecutar(inventarioOrigen);
            historialOperaciones.agregarOperacion("Transferencia de " + cantidad + " " + producto + " a " + inventarioDestinoStr );
            actualizarTablas();
        }); 
        
    }//GEN-LAST:event_btnTransferenciaActionPerformed

    private void btnAjusteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAjusteActionPerformed
        // Obtener el inventario seleccionado
        final Inventario inventarioSeleccionado;
        String inventarioSeleccionadoStr = (String) comboBoxInventario.getSelectedItem();
        
        switch (inventarioSeleccionadoStr){
            case "Inventario A":
                inventarioSeleccionado = inventarioA;
                break;
            case "Inventario B":
                inventarioSeleccionado = inventarioB;
                break;
            default:
                return;
        }
        
        // Obtener datos del producto
        String producto = txtProducto.getText();
        int cantidad;
        try{
            cantidad = Integer.parseInt(txtCantidad.getText());
        }catch (NumberFormatException e){
            JOptionPane.showMessageDialog(this, "Por favor ingrese un numero entero.");
            return;
        }
        
        OperacionInventario ajuste = FabricaOperaciones.crearOperacion("ajuste", producto, cantidad, inventarioSeleccionado);
       
        executor.submit(()->{
            ajuste.ejecutar(inventarioSeleccionado);
            historialOperaciones.agregarOperacion("Ajuste  " + cantidad + " " + producto + " a " + inventarioSeleccionadoStr );
            actualizarTablas();
        }); 
    }//GEN-LAST:event_btnAjusteActionPerformed

    private void btnHistorialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHistorialActionPerformed
        // Mostrar historial
        String historial = String.join("\n", historialOperaciones.obtenerHistorial());
        JOptionPane.showMessageDialog(this, "Historial de Operaciones:\n" + historial);
        
    }//GEN-LAST:event_btnHistorialActionPerformed

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        // Obtener el inventario seleccionado
        final Inventario inventarioSeleccionado;
        String inventarioSeleccionadoStr = (String) comboBoxInventario.getSelectedItem();
        
        switch (inventarioSeleccionadoStr){
            case "Inventario A":
                inventarioSeleccionado = inventarioA;
                break;
            case "Inventario B":
                inventarioSeleccionado = inventarioB;
                break;
            default:
                return;
        }
        
       // Obtener producto y cantidad
        String producto = txtProducto.getText();
        int cantidad;
        try {
            cantidad = Integer.parseInt(txtCantidad.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Cantidad inválida. Por favor ingrese un número.");
            return;
        }

        // Crear y ejecutar la operación de agregar producto
        OperacionInventario agregarProducto = FabricaOperaciones.crearOperacion("agregar", producto, cantidad, inventarioSeleccionado);
        
        executor.submit(()->{
            agregarProducto.ejecutar(inventarioSeleccionado);
            historialOperaciones.agregarOperacion("Agregar " + cantidad + " " + producto + " a " + inventarioSeleccionadoStr );
            actualizarTablas();
        });
        
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void actualizarTablas(){
        // Limpiamos la tabla
        modeloInventarioA.setRowCount(0);
        modeloInventarioB.setRowCount(0);
        
        // Llenamos las tablas con los productos y cantidades
        for (Producto producto : inventarioA.obtenerProductos()){
            modeloInventarioA.addRow(new Object[]{producto.getNombre(),producto.getCantidad()});
        }
        
        for (Producto producto : inventarioB.obtenerProductos()){
            modeloInventarioB.addRow(new Object[]{producto.getNombre(),producto.getCantidad()});
        }
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new VentanaPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnAjuste;
    private javax.swing.JButton btnHistorial;
    private javax.swing.JButton btnTransferencia;
    private javax.swing.JComboBox<String> cmbInventarioDestino;
    private javax.swing.JComboBox<String> cmbInventarioOrigen;
    private javax.swing.JComboBox<String> comboBoxInventario;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTable tablaInventarioA;
    private javax.swing.JTable tablaInventarioB;
    private javax.swing.JTextField txtCantidad;
    private javax.swing.JTextField txtProducto;
    // End of variables declaration//GEN-END:variables
}
